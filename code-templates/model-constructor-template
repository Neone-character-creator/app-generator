function ${name}Model(original){
    Object.getOwnPropertyNames(this.definition).forEach((property)=>{
        const propertyDef = this.definition[property];
        if(original === undefined || original[property] === undefined) {
            if(propertyDef.default !== undefined) {
                this[property] = propertyDef.default;
            } else if (propertyDef.type.match(/\[.*\]/)){
                this[property] = [];
            } else {
                this[property] = new module.exports[propertyDef.type]();
            }
        } else {
            if(_.isString(original[property]) && original[property].startsWith("#")) {
                this[property] = original[property];
            } else if (_.isArray(original[property])){
                const containedType = propertyDef.type.substring(1, propertyDef.type.length -1);
                const constructor = module.exports[containedType];
                if(constructor) {
                    this[property] = original[property].map(i => new constructor(i));
                } else {
                    this[property] = original[property];
                }
            } else if (_.isObject(original[property])) {
                this[property] = {...this[property], ...new module.exports[propertyDef.type](original[property])};
            } else {
                this[property] = original[property];
            }
         }
    });
    if(this.id === undefined) {
        this.id = '${name}-' + ${name}Model.id();
    }
    this.effects = _.isArray(this.__proto__.effects) ? [...this.__proto__.effects] : {...this.__proto__.effects};
}

${name}Model._id = 1;
${name}Model.id = function(){
    return ${name}Model._id++;
}