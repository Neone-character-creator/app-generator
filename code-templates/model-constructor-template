function ${name}Model(){
    Object.getOwnPropertyNames(this.definition).forEach((property)=>{
        const propertyDef = this.definition[property];
        if(property.startsWith("@")){
            const symbol = Symbol(property);
            this[symbol] = propertyDef[property];
        } else {
            if(propertyDef.default !== undefined) {
                this[property] = propertyDef.default;
            } else if (propertyDef.type.match(/\[.*\]/)){
                this[property] = [];
            } else {
                this[property] = new module.exports[propertyDef.type]();
            }
            if (_.isArray(this[property])){
                // TODO: Add always present values perhaps?
            } else if (_.isObject(this[property])) {
                this[property] = {...this[property], ...propertyDef.value};
            }
        }
    });
    if(this.id === undefined) {
        this.id = '${name}-' + ${name}Model.id();
    }
    this.effects = _.isArray(this.__proto__.effects) ? [...this.__proto__.effects] : {...this.__proto__.effects};
}

${name}Model._id = 1;
${name}Model.id = function(){
    return ${name}Model._id++;
}