function ${name}Model(original){
    Object.getOwnPropertyNames(this.definition.properties).forEach((property)=>{
        const propertyDef = this.definition.properties[property];
        if(original === undefined || original[property] === undefined) {
            if(propertyDef.default !== undefined) {
                this[property] = propertyDef.default;
            } else if (propertyDef.type.match(/\[.*\]/)){
                this[property] = [];
                const instanceTypeName = propertyDef.type.substring(1, propertyDef.type.length - 1);
                const instanceDefinition = module.exports[instanceTypeName];
                if (instanceDefinition) {
                    this[property].__proto__.definition = instanceDefinition.definition;
                    this[property].__proto__.values = instanceDefinition.values;
                }
            } else {
                this[property] = new module.exports[propertyDef.type]();
            }
        } else {
            if(_.isString(original[property]) && original[property].startsWith("#")) {
                this[property] = original[property];
            } else if (_.isArray(original[property])){
                const containedType = propertyDef.type.substring(1, propertyDef.type.length -1);
                const constructor = module.exports[containedType];
                if(constructor) {
                    this[property] = original[property].map(i => {
                        const lookupValue = constructor.values[i];
                        if (lookupValue){
                            return lookupValue;
                        } else {
                            return new constructor(i)
                        }
                    });
                } else {
                    this[property] = original[property];
                }
            } else if (_.isObject(original[property])) {
                if(original[property].choices && original[property].options) {
                    this[property] = original[property];
                } else {
                    this[property] = {...this[property], ...new module.exports[propertyDef.type](original[property])};
                }
            } else {
                this[property] = original[property];
            }
         }
    });
    if(this.id === undefined) {
        this.id = '${name}-' + ${name}Model.id();
    }
    this.effects = _.isArray(this.__proto__.effects) ? [...this.__proto__.effects] : {...this.__proto__.effects};
    this._protoName = "${name}";
}

${name}Model._id = 1;
${name}Model.id = function(){
    return new ObjectID().toString();
}