const boundProperty = ${boundProperty}; // The expression used to determine the value of binding.
const readOnly = ${readOnly}; // If this component only calculates its value, or is bound and can update it.
const valueExpression = "${values}";
const connected = connect((state, ownProps) => {
    const value = (()=>{
        return interpreter.interpret(`return ` + boundProperty, {
            $state: state,
            $model: models,
            $this: null
        })
    })();
    const options = determineValues(valueExpression, state);
    return {
        options,
        value
    };
}, dispatch => {
    const update = readOnly ? () => {} :
        _.debounce((value) => {
            dispatch({ type: "SET", path: boundProperty, value: value});
        });
    return {
        update: (event) => {
            update(event.target.value);
        }
    };
})(Component);

function determineValues(expression, state, value){
    if (!expression){
        return [];
    }
    const expressionTokens = expression.split(".");
    switch(expressionTokens[0]){
        case "model":
            return _.get(models, expressionTokens.slice(1).join("."));
        case "character":
            return _.get(state, expression, []);
    }
}

export default connected;