class ErrorBoundary extends React.Component {
    constructor(props) {
        super(props);
        this.state = { hasError: false };
    }

    static getDerivedStateFromError(error){
        return {
            error: "There was an error in ${componentName}",
            hasError: true
        };
    }

    componentDidCatch(error, errorInfo){
        console.error(error, errorInfo);
    }

    render() {
        if (this.state.hasError) {
          // You can render any custom fallback UI
          return <h1>{this.state.error}</h1>;
        }

        return this.props.children;
      }
}

const defaultStyle = {
    border: ${border}
};

class ${componentName} extends React.Component {
    render(){
        if(!this.props.hidden){
            return (<ErrorBoundary>
                <Grid id="${componentIdentifier}" style={defaultStyle} container spacing={8} justify="space-around" direction={"${direction}" == "vertical" ? "column" : "row"}>
                    ${children}
                </Grid>
            </ErrorBoundary>);
        } else {
            return null
        }
    }

    shouldComponentUpdate(nextProps){
        return this.props.hidden !== nextProps.hidden ||
            this.props.index !== nextProps.index ||
            this.props.value !== nextProps.value;
    }
}

const Component = ${componentName};