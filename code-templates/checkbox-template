class ErrorBoundary extends React.Component {
    constructor(props) {
        super(props);
        this.state = { hasError: false };
    }

    static getDerivedStateFromError(error){
        return {
            error: "There was an error in ${componentName}",
            hasError: true
        };
    }

    componentDidCatch(error, errorInfo){
        console.error(error, errorInfo);
    }

    render() {
        if (this.state.hasError) {
          // You can render any custom fallback UI
          return <h1>{this.state.error}</h1>;
        }

        return this.props.children;
      }
}

class ${componentName} extends React.Component {
    constructor(props){
        super(props);
        this.update = function(event){
            const value = event.target.value;
            if(!stateProps.maxSelection || stateProps.maxSelection == 1 || value.length <= stateProps.maxSelection) {
                this.props.dispatch({ type: "SET", path: boundProperty, value});
            }
        }
        this.update = this.update.bind(this);
    }
    render() {
        if(!this.props.hidden){
            return (<ErrorBoundary>
                <Checkbox id="${componentIdentifier}" checked={this.props.value} onChange={this.update} />
            </ErrorBoundary>)
        } else {
            return null
        }
    }

    shouldComponentUpdate(nextProps, nextState) {
        return nextProps.value !== this.props.value;
    }
}

const Component = ${componentName};