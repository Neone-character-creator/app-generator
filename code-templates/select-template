class ErrorBoundary extends React.Component {
    constructor(props) {
        super(props);
        this.state = { hasError: false };
    }

    static getDerivedStateFromError(error){
        return {
            error: "There was an error in ${componentName}"
        };
    }

    componentDidCatch(error, errorInfo){
        console.error(error, errorInfo);
    }

    render() {
        if (this.state.hasError) {
          // You can render any custom fallback UI
          return <h1>{this.props.error}</h1>;
        }

        return this.props.children;
      }
}

class ${componentName} extends React.Component {
    constructor(props){
        super(props);

        this.update = function(event){
            var value = event.target.value;
            if(!this.props.maxSelections || (!_.isArray(value) && this.props.maxSelections === 1) || value.length <= this.props.maxSelections) {
                this.props.dispatch({ type: "SET", path: this.props.boundProperty, value});
            }
        }

        this.update = this.update.bind(this);
    }
    render(){
        return (
        <ErrorBoundary>
        <FormControl fullWidth={true}>
                    <InputLabel id="${componentIdentifier}-label">${label}</InputLabel>
                    <Select id="${componentIdentifier}" autoWidth={true} value={this.props.value} onChange={this.update}
                        renderValue={(x)=>_.get(this.props.value, itemTextPath)} multiple={this.props.maxSelections > 1}
                        children={this.props.options.map((item, index) => (
                            <MenuItem value={item}>
                                {
                                    [_.get(item, itemTextPath, item)].map(prop => {
                                        if (typeof prop === "function") {
                                            return prop.bind(prop)();
                                        }
                                        return prop;
                                    })[0]

                                }
                            </MenuItem>))}
                    />
                </FormControl>
                </ErrorBoundary>)
    }

    shouldComponentUpdate(nextProps){
        return this.props.value !== nextProps.value ||
            this.props.options !== nextProps.options;
    }
}

const itemTextPath = ${itemText};

const Component = ${componentName};