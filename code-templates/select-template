class ErrorBoundary extends React.Component {
    constructor(props) {
        super(props);
        this.state = { hasError: false };
    }

    static getDerivedStateFromError(error){
        return {
            error: "There was an error in ${componentName}",
            hasError: true
        };
    }

    componentDidCatch(error, errorInfo){
        console.error(error, errorInfo);
    }

    render() {
        if (this.state.hasError) {
          // You can render any custom fallback UI
          return <h1>{this.state.error}</h1>;
        }

        return this.props.children;
      }
}

function translateValueForRender(value, context){
    if (_.isArray(value)) {
        return value.map(translateValueForRender).join(", ");
    } else if (_.isObject(value)){
        if (value.options && value.choices) {
            return renderOption(value);
        } else {
            return _.get(value, itemTextPath);
        }
    } else {
        return interpreter.interpret(value, context);
    }
}

class ${componentName} extends React.Component {
    constructor(props){
        super(props);

        this.update = function(event){
            var value = event.target.value;
            if(!this.props.maxSelections || (!_.isArray(value) && this.props.maxSelections === 1) || value.length <= this.props.maxSelections) {
                this.props.dispatch({ type: "SET", path: this.props.boundProperty, value});
            }
        }

        this.update = this.update.bind(this);
        this.isItemDisabled = function(item) {
            return interpreter.interpret(listItemDisabledExpression, {...this.props.context, $this: item}) || false;
        }
        this.isItemDisabled = this.isItemDisabled.bind(this);
        this.renderValue = value => {
            const extractedValue = itemTextPath ? _.get(value, itemTextPath) : value;
            if (valueDisplayExpression) {
                if (_.isArray(extractedValue)) {
                    return translateValueForRender(extractedValue.map(ev => {
                        const localContext = {... this.props.context, ...{
                            $this: ev
                        }};
                        return interpreter.interpret(valueDisplayExpression, localContext);
                    }));
                }
                const localContext = {... this.props.context,
                    $this: extractedValue
                };
                return translateValueForRender(interpreter.interpret(valueDisplayExpression, localContext), {... this.props.context, $this: extractedValue});
            } else {
                return translateValueForRender(extractedValue, {... this.props.context, $this: extractedValue});
            }
        }
        this.renderValue = this.renderValue.bind(this);

        this.renderItems = () => this.props.options.map((item, index) => {
            const itemDisabled = this.isItemDisabled(item);
            return (<MenuItem value={item} disabled={itemDisabled} >
                {
                    [_.get(item, itemTextPath, item)].map(prop => {
                        if(valueDisplayExpression) {
                            const localContext = {... this.props.context, ...{
                                $this: item
                            }};
                            return translateValueForRender(interpreter.interpret(valueDisplayExpression, localContext), localContext);
                        }
                    return translateValueForRender(prop, {...this.props.context, $this: prop});
                    })[0]
                }
            </MenuItem>)
        })
    }
    render(){
        if(!this.props.hidden){
        return (
        <ErrorBoundary>
        <FormControl fullWidth={true}>
                    <InputLabel id="${componentIdentifier}-label">${label}</InputLabel>
                    <Select id="${componentIdentifier}" autoWidth={true} value={this.props.value} onChange={this.update}
                        renderValue={this.renderValue} multiple={this.props.maxSelections > 1} disabled={this.props.disabled}
                        children={this.renderItems()}
                    />
                </FormControl>
                </ErrorBoundary>)
        } else {
            return null
        }
    }

    shouldComponentUpdate(nextProps){
        return this.props.value !== nextProps.value ||
            this.props.options !== nextProps.options || this.props.disabled !== nextProps.disabled;
    }
}

const itemTextPath = ${itemText};
const valueDisplayExpression = ${displayExpression};
const Component = ${componentName};
const listItemDisabledExpression = ${itemDisabledWhen};