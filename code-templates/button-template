class ErrorBoundary extends React.Component {
    constructor(props) {
        super(props);
        this.state = { hasError: false };
    }

    static getDerivedStateFromError(error){
        return {
            error: "There was an error in ${componentName}",
            hasError: true
        };
    }

    componentDidCatch(error, errorInfo){
        console.error(error, errorInfo);
    }

    render() {
        if (this.state.hasError) {
          // You can render any custom fallback UI
          return <h1>{this.state.error}</h1>;
        }

        return this.props.children;
      }
}

class ${componentName} extends React.Component {
    constructor (props){
        super(props);
        this.update = () => {
            props.performAction();
        }
    }
    render() {
        if(!this.props.hidden){
        return (
            <ErrorBoundary>
                <Button id="${componentIdentifier}" variant="contained" onClick={this.update} disabled={this.props.disabled} >
                    {this.props.value}
                </Button>
            </ErrorBoundary>);
        } else {
            return null
        }
    }

    shouldComponentUpdate(nextProps, nextState){
        return this.props.disabled !== nextProps.disabled ||
            this.props.value !== nextProps.value ||
            !_.isEqual(this.props.clickAction, nextProps.clickAction);
    }
}

const Component = ${componentName};