class ErrorBoundary extends React.Component {
    constructor(props) {
        super(props);
        this.state = { hasError: false };
    }

    static getDerivedStateFromError(error){
        return {
            error: "There was an error in ${componentName}",
            hasError: true
        };
    }

    componentDidCatch(error, errorInfo){
        console.error(error, errorInfo);
    }

    render() {
        if (this.state.hasError) {
          // You can render any custom fallback UI
          return <h1>{this.state.error}</h1>;
        }

        return this.props.children;
      }
}

class Component extends React.Component {
    constructor(props){
        super(props);

        const updateDispatch = _.debounce((value) => {
            this.props.dispatch({ type: "SET", path: this.props.boundProperty, value});
        });

        this.update = function(event){
            const value = event.target.value;
            this.setState({
                text: value
            });
            if(!this.props.maxSelection || this.props.maxSelection == 1 || value.length <= this.props.maxSelection) {
               updateDispatch(value);
            }
        };
        this.update = this.update.bind(this);
    }

    render(){
        if(!this.props.hidden){
        return (
        <ErrorBoundary>
        <Textfield disabled={this.props.disabled} id="${componentIdentifier}" fullWidth={true} label="${label}" value={this.props.value} onChange={this.update} />
        </ErrorBoundary>
        );
        } else {
            return null
        }
    }

    shouldComponentUpdate(nextProps){
        return this.props.disabled !== nextProps.disabled ||
            this.props.value !== nextProps.value;
    }
}