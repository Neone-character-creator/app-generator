// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`component generation module select components generates the component 1`] = `
"import React from \\"react\\";
import { connect } from \\"react-redux\\";
import Textfield from \\"@material-ui/core/TextField\\";
import FormControl from \\"@material-ui/core/FormControl\\";
import InputLabel from \\"@material-ui/core/InputLabel\\";
import Select from \\"@material-ui/core/Select\\";
import MenuItem from \\"@material-ui/core/MenuItem\\";
import * as _ from \\"lodash\\";

import models from \\"../models\\";

const Component = (props) => (
    <FormControl>
    <InputLabel id=\\"select-select-label\\">Label</InputLabel>
    <Select id=\\"-select\\" children value={props.boundValue} onChange={props.update} children={props.options.map((item, index) => (<MenuItem value={item}>{_.get(item, itemTextPath)}</MenuItem>))} />
    </FormControl>
);

// The path of the bound portion of the state.
const boundPropertyPath = \\"undefined\\";
// The path of the select values.
const boundValuesPath = \\"0,1,2\\";
const itemTextPath = \\"undefined\\";
const connected = connect((state) => {
    const boundValue = _.get(state, boundPropertyPath, \\"\\");
    const options = determineValues(boundValuesPath);
    return {
        options,
        boundValue
    };
}, dispatch => {
    const update = _.debounce((value) => {
        dispatch({ type: \\"SET\\", path: boundPropertyPath, value: value});
    });
    return {
        update: (event) => {
            update(event.target.value);
        }
    };
})(Component);

function determineValues(expression){
    const expressionTokens = expression.split(\\".\\");
    switch(expressionTokens[0]){
        case \\"model\\":
            return _.get(models, expressionTokens.slice(1).join(\\".\\"));
    }
}

export default connected;"
`;

exports[`component generation module select components throws an error if values is undefined 1`] = `"The property items.values is required, but was not found in the component configuration: {\\"type\\":\\"select\\",\\"label\\":\\"Label\\",\\"items\\":{},\\"componentName\\":\\"select\\"}"`;

exports[`component generation module textfield components can be bound to a model property 1`] = `
"import React from \\"react\\";
import { connect } from \\"react-redux\\";
import Textfield from \\"@material-ui/core/TextField\\";
import * as _ from \\"lodash\\";


const Component = (props) => (
    <Textfield disabled={props.disabled} id=\\"textfield-textfield\\" fullWidth label=\\"Label\\" value={props.boundValue} onChange={props.update} />
);

const boundExpression = \\"model.string\\";
const readOnly = false;

const connected = connect((state) => {
    const processingResults = [boundExpression, boundExpression];
    for(let i = 0;;i++){
        processingResults[i % 2] = resolveExpression(processingResults[i % 2], state)
        if (processingResults[0] === processingResults[1]){
            break;
        }
    }
    const boundValue = processingResults[0];
    return {
        boundValue,
        disabled: readOnly
    };
}, dispatch => {
    const update = _.debounce((value) => {
        dispatch({ type: \\"SET\\", path: boundExpression, value: value});
    });
    return {
        update: (event) => {
            if(!readOnly) {
                update(event.target.value);
            }
        }
    };
})(Component);

export default connected;

function resolveExpression(template, state){
    return _.template(template)(state);
}"
`;

exports[`component generation module textfield components can be bound to an action 1`] = `
"import React from \\"react\\";
import { connect } from \\"react-redux\\";
import Textfield from \\"@material-ui/core/TextField\\";
import * as _ from \\"lodash\\";


const Component = (props) => (
    <Textfield disabled={props.disabled} id=\\"textfield-textfield\\" fullWidth label=\\"Label\\" value={props.boundValue} onChange={props.update} />
);

const boundExpression = \\"\\";
const readOnly = false;

const connected = connect((state) => {
    const processingResults = [boundExpression, boundExpression];
    for(let i = 0;;i++){
        processingResults[i % 2] = resolveExpression(processingResults[i % 2], state)
        if (processingResults[0] === processingResults[1]){
            break;
        }
    }
    const boundValue = processingResults[0];
    return {
        boundValue,
        disabled: readOnly
    };
}, dispatch => {
    const update = _.debounce((value) => {
        dispatch({ type: \\"SET\\", path: boundExpression, value: value});
    });
    return {
        update: (event) => {
            if(!readOnly) {
                update(event.target.value);
            }
        }
    };
})(Component);

export default connected;

function resolveExpression(template, state){
    return _.template(template)(state);
}"
`;

exports[`component generation module textfield components generates the component 1`] = `
"import React from \\"react\\";
import { connect } from \\"react-redux\\";
import Textfield from \\"@material-ui/core/TextField\\";
import * as _ from \\"lodash\\";


const Component = (props) => (
    <Textfield disabled={props.disabled} id=\\"textfield-textfield\\" fullWidth label=\\"Label\\" value={props.boundValue} onChange={props.update} />
);

const boundExpression = \\"\\";
const readOnly = false;

const connected = connect((state) => {
    const processingResults = [boundExpression, boundExpression];
    for(let i = 0;;i++){
        processingResults[i % 2] = resolveExpression(processingResults[i % 2], state)
        if (processingResults[0] === processingResults[1]){
            break;
        }
    }
    const boundValue = processingResults[0];
    return {
        boundValue,
        disabled: readOnly
    };
}, dispatch => {
    const update = _.debounce((value) => {
        dispatch({ type: \\"SET\\", path: boundExpression, value: value});
    });
    return {
        update: (event) => {
            if(!readOnly) {
                update(event.target.value);
            }
        }
    };
})(Component);

export default connected;

function resolveExpression(template, state){
    return _.template(template)(state);
}"
`;

exports[`component generation module throws an error when a component has a child of an invalid type 1`] = `"Import for type bad not supported."`;

exports[`component generation module throws an error when a component has a key but is undefined 1`] = `"The component configuration type of undefined and the generator configuration type of container are different for components parent."`;

exports[`component generation module throws an error when a view has a child of an invalid type 1`] = `"Import for type notAValidType not supported."`;

exports[`component generation module throws an error when an object is given 1`] = `"Component type must be a string, was object"`;

exports[`component generation module throws an error when creating a generator for an unsupported type 1`] = `"component type random not supported"`;

exports[`component generation module throws an error when null is given 1`] = `"Component type must be a string, was object"`;
