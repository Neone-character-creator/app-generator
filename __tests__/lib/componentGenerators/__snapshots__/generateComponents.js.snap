// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`component generation module select components generates the component 1`] = `
"import React from \\"react\\";
import * as _ from \\"lodash\\";
import models from \\"../models\\";
import interpreter from \\"../interpreter\\";
import Checkbox from \\"@material-ui/core/Checkbox\\";
import Textfield from \\"@material-ui/core/TextField\\";
import FormControl from \\"@material-ui/core/FormControl\\";
import InputLabel from \\"@material-ui/core/InputLabel\\";
import Select from \\"@material-ui/core/Select\\";
import MenuItem from \\"@material-ui/core/MenuItem\\";
import List from \\"@material-ui/core/List\\";
import ListItem from \\"@material-ui/core/ListItem\\";
import Grid from \\"@material-ui/core/Grid\\";
import Button from \\"@material-ui/core/Button\\";

const Component = (props) => (
    <FormControl>
    <InputLabel id=\\"select-select-label\\">Label</InputLabel>
    <Select id=\\"select-select\\" autoWidth value={props.value} onChange={props.update}
    renderValue={(x)=>_.get(props.value, itemTextPath)} multiple={props.maxSelections > 1}
     children={props.options.map((item, index) => (<MenuItem value={item}>
    {
        [_.get(item, itemTextPath, item)].map(prop => {
        if (typeof prop === \\"function\\") {
            return prop.bind(prop)();
        }
        return prop;
        })[0]

    }
    </MenuItem>))} />
    </FormControl>
)

const itemTextPath = \\"undefined\\";
export default Component;"
`;

exports[`component generation module select components throws an error if values is undefined 1`] = `"The property items.values is required, but was not found in the component configuration: {\\"type\\":\\"select\\",\\"label\\":\\"Label\\",\\"items\\":{},\\"componentName\\":\\"select\\",\\"readOnly\\":false}"`;

exports[`component generation module textfield components can be bound to a model property 1`] = `
"import React from \\"react\\";
import * as _ from \\"lodash\\";
import models from \\"../models\\";
import interpreter from \\"../interpreter\\";
import Checkbox from \\"@material-ui/core/Checkbox\\";
import Textfield from \\"@material-ui/core/TextField\\";
import FormControl from \\"@material-ui/core/FormControl\\";
import InputLabel from \\"@material-ui/core/InputLabel\\";
import Select from \\"@material-ui/core/Select\\";
import MenuItem from \\"@material-ui/core/MenuItem\\";
import List from \\"@material-ui/core/List\\";
import ListItem from \\"@material-ui/core/ListItem\\";
import Grid from \\"@material-ui/core/Grid\\";
import Button from \\"@material-ui/core/Button\\";
import { connect } from \\"react-redux\\";
const Component = (props) => (
    <Textfield disabled={props.disabled} id=\\"textfield-textfield\\" fullWidth label=\\"Label\\" value={props.value} onChange={props.update} />
)
const isBoundComponent = true
const boundProperty = \\"model.string\\"; // The expression used to determine the value of binding.
const readOnly = false; // If this component only calculates its value, or is bound and can update it.
const valueExpression = \\"\\";
const action = \\"undefined\\";
const disabledWhenExpression = undefined;
const selectionCountExpression = 0;
const connected = connect((state, ownProps) => {
    const context = {
        $state: state,
        $model: models,
        $this: ownProps.value,
        $index: ownProps.index
    }
    const value = (()=>{
        try {
            if (isBoundComponent){
                return interpreter.interpret(\\"# \\" + boundProperty, context);
            } else {
                return interpreter.interpret(boundProperty, context);
            }
        } catch(e){
            console.error(e);
            return undefined;
        }
    })();
    const maxSelections = interpreter.interpret(selectionCountExpression, context);
    const options = (()=>{
        return interpreter.interpret(valueExpression, context);
        })() || [];
    const disabled = interpreter.interpret(disabledWhenExpression, context);
    return {
        disabled,
        options,
        context,
        maxSelections,
        value: _.isNil(value) ? \\"\\" : value
    };
}, (dispatch) => {
    return {dispatch};
}, (stateProps, dispatchProps, ownProps) => {
    var {dispatch} = dispatchProps;
    const update = readOnly ? () => {} :
        _.debounce((value) => {
            if(!stateProps.maxSelections || value.length <= stateProps.maxSelections) {
                dispatch({ type: \\"SET\\", path: boundProperty, value: value});
            }
        });
    const onClick = readOnly || !action ? () => {} :
        (action) => {
            dispatch(action);
        };
    return {...stateProps,
        onClick: (event) => {
            const interpretedAction = interpreter.interpret(action, stateProps.context);
            onClick(interpretedAction);
        },
        update: (event) => {
            update(event.target.value);
        }
    };
})(Component);

function determineValues(expression, state, value){
    if (!expression){
        return [];
    }
    const expressionTokens = expression.split(\\".\\");
    switch(expressionTokens[0]){
        case \\"model\\":
            return _.get(models, expressionTokens.slice(1).join(\\".\\"));
        case \\"character\\":
            return _.get(state, expression, []);
    }
}

export default connected;"
`;

exports[`component generation module textfield components can be bound to an action 1`] = `
"import React from \\"react\\";
import * as _ from \\"lodash\\";
import models from \\"../models\\";
import interpreter from \\"../interpreter\\";
import Checkbox from \\"@material-ui/core/Checkbox\\";
import Textfield from \\"@material-ui/core/TextField\\";
import FormControl from \\"@material-ui/core/FormControl\\";
import InputLabel from \\"@material-ui/core/InputLabel\\";
import Select from \\"@material-ui/core/Select\\";
import MenuItem from \\"@material-ui/core/MenuItem\\";
import List from \\"@material-ui/core/List\\";
import ListItem from \\"@material-ui/core/ListItem\\";
import Grid from \\"@material-ui/core/Grid\\";
import Button from \\"@material-ui/core/Button\\";

const Component = (props) => (
    <Textfield disabled={props.disabled} id=\\"textfield-textfield\\" fullWidth label=\\"Label\\" value={props.value} onChange={props.update} />
)
export default Component;"
`;

exports[`component generation module textfield components generates the component 1`] = `
"import React from \\"react\\";
import * as _ from \\"lodash\\";
import models from \\"../models\\";
import interpreter from \\"../interpreter\\";
import Checkbox from \\"@material-ui/core/Checkbox\\";
import Textfield from \\"@material-ui/core/TextField\\";
import FormControl from \\"@material-ui/core/FormControl\\";
import InputLabel from \\"@material-ui/core/InputLabel\\";
import Select from \\"@material-ui/core/Select\\";
import MenuItem from \\"@material-ui/core/MenuItem\\";
import List from \\"@material-ui/core/List\\";
import ListItem from \\"@material-ui/core/ListItem\\";
import Grid from \\"@material-ui/core/Grid\\";
import Button from \\"@material-ui/core/Button\\";

const Component = (props) => (
    <Textfield disabled={props.disabled} id=\\"textfield-textfield\\" fullWidth label=\\"Label\\" value={props.value} onChange={props.update} />
)
export default Component;"
`;

exports[`component generation module throws an error when a component has a child of an invalid type 1`] = `"Import for type bad not supported"`;

exports[`component generation module throws an error when a component has a key but is undefined 1`] = `"Cannot read property 'bind' of undefined"`;

exports[`component generation module throws an error when a view has a child of an invalid type 1`] = `"Import for type notAValidType not supported"`;

exports[`component generation module throws an error when an object is given 1`] = `"Component type must be a string, was object"`;

exports[`component generation module throws an error when null is given 1`] = `"Component type must be a string, was object"`;
